!<arch>
0-isupper.c/    1602347846  1000  1000  100664  212       `
#include "holberton.h"

/**
 * _isupper - Checks if c is an uppercase letter
 * @c: Character to check
 * Return: 1 if true
 */

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
		return (1);
	else
		return (0);
}
0-memset.c/     1602347877  1000  1000  100664  316       `
#include "holberton.h"

/**
 * _memset - fills memory with a constant byte
 * @s: Appointed pointer
 * @b: Constant byte
 * @n: number of bytes to fill
 * Return: pointer to memory area
 */


char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
	s[i] = b;
	i++;
	}
	return (s);
}
0-strcat.c/     1602347877  1000  1000  100664  465       `
#include "holberton.h"

/**
 * _strcat - concatenates two strings
 * @dest: destination string
 * @src: source string
 * Return: destination string
 */

char *_strcat(char *dest, char *src)
{
	int srclength = 0, destlength = 0, i;

	while (src[srclength] != '\0')
		srclength++;
	while (dest[destlength] != '\0')
		destlength++;
	for (i = 0 ; i <= srclength && src[i] != '\0' ; i++)
		dest[destlength + i] = src[i];
	dest[destlength + i] = '\0';

	return (dest);
}

100-atoi.c/     1602348674  1000  1000  100664  48        `
#include "holberton.h"

int _atoi(char *s)
{

}
1-isdigit.c/    1602347877  1000  1000  100664  207       `
#include "holberton.h"

/**
 * _isdigit - Checks if c is a numer
 * @c: Character to check
 * Return: Always 1 if true
 */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}

1-memcpy.c/     1602347877  1000  1000  100664  303       `
#include "holberton.h"

/**
 * _memcpy - copies memory area
 * @dest: destination
 * @src: source
 * @n: number of bytes
 * Return: pointer to destination
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		dest[i] = src[i];
		i++;
	}
	return (dest);
}

1-strncat.c/    1602347877  1000  1000  100664  474       `
#include "holberton.h"

/**
 * _strncat - appends string to n
 * @dest: destination string
 * @src: source string
 * @n: length to copy
 * Return: destination
 */

char *_strncat(char *dest, char *src, int n)
{
	int srclength = 0, destlength = 0, i;

	while (src[srclength] != '\0')
		srclength++;
	while (dest[destlength] != '\0')
		destlength++;
	for (i = 0 ; i <= srclength && i < n; i++)
		dest[destlength + i] = src[i];
	dest[destlength + i] = '\0';

	return (dest);
}
2-strchr.c/     1602347877  1000  1000  100664  313       `
#include "holberton.h"
#include <stddef.h>

/**
 * _strchr - locates a character in a string
 * @s: string
 * @c: character
 * Return: pointer to character in string
 */

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
			return (s);
		s++;
	}
	if (*s == c)
		return (s);
	return (NULL);
}

2-strlen.c/     1602347877  1000  1000  100664  219       `
#include "holberton.h"

/**
 * _strlen - returns length of string
 * @s: string
 * Return: length of string
 */

int _strlen(char *s)
{
	int length = 0;

	while (*s != '\0')
	{
		s++;
		length++;
	}
	return (length);
}

2-strncpy.c/    1602347877  1000  1000  100664  434       `
#include "holberton.h"

/**
 * _strncpy - copies string to n
 * @dest: destination
 * @src: source
 * @n: length
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int length = 0, spot;

	while (src[length] != '\0')
	{
		length++;
	}
	if (n >= length)
	{
		for (spot = 0; spot <= length; spot++)
			dest[spot] = src[spot];
	}
	else
	{
	for (spot = 0; spot < n; spot++)
		dest[spot] = src[spot];
	}
	return (dest);
}
3-islower.c/    1602347877  1000  1000  100664  433       `
#include "holberton.h"

int _putchar(char c);
/**
 * _islower - Checks value of c
 * @c: Character that is either upper or lowercase
 * Description: Outputs 1 if c is lowercase and 1 if not
 *
 * Return: c
 */

/* Will need boolean since checking true or false */


int _islower(int c)
{
/* Use if statement to say if it is greater or less than 90 */
	if (c > 90)
	{
		return (1);
	}
	if (c <= 90)
	{
		return (0);
	}
	return (c);
}

3-puts.c/       1602347877  1000  1000  100664  197       `
#include "holberton.h"

/**
 * _puts - prints string
 * @str: string to print
 * Return: void
 */

void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}

3-strcmp.c/     1602347877  1000  1000  100664  385       `
#include "holberton.h"

/**
 * _strcmp - compares two strings
 * @s1: string 1
 * @s2: string 2
 * Return: negative, zero, or positive value if s1 is greater than, equal to,
 * or less than s2
 */

int _strcmp(char *s1, char *s2)
{
	int a = 0, b = 0, c;

	while (s1[a] != '\0')
		a++;
	while (s2[b] != '\0')
		b++;
	if (a == b)
	{
		c = 0;
	}
	else
	{
		c = s1 - s2;
	}
	return (c);
}

3-strspn.c/     1602347877  1000  1000  100664  411       `
#include "holberton.h"

/**
 * _strspn - gets the length of a prefix substring
 * @s: full string
 * @accept: string within s
 * Return: number of bytes
 */

unsigned int _strspn(char *s, char *accept)
{
	int i, place;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (place = 0; accept[place] != '\0'; place++)
		{
			if (accept[place] == s[i])
				break;
		}
		if (accept[place] == '\0')
			break;
	}
	return (i);
}

4-isalpha.c/    1602347877  1000  1000  100664  320       `
#include "holberton.h"

/**
 * _isalpha - Checks value of c
 * @c: Character that may be an alpha
 * Description: Outputs 1 if c is alpha and 1 if not
 *
 * Return: c
 */


int _isalpha(int c)
{
	if (c >= 65 &&  c <= 90)
	{
		return (1);
	}
	else if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.c/    1602347877  1000  1000  100664  458       `
#include "holberton.h"

/**
 * _strpbrk - places pointer at first matching character
 * @s: string to be evaluated
 * @accept: string to match
 * Return: pointer s
 */

char *_strpbrk(char *s, char *accept)
{
	int i, n = 0;

	for (i = 0; *s != '\0'; i++)
	{
		for (n = 0; accept[n] != '\0'; n++)
			if (s[i] == accept[n])
				break;
		if (accept[n] != '\0')
			return (s);
		else if (accept[n] == '\0' && s[i + 1] == '\0')
			break;
		s++;
	}
	return (0);
}
5-strstr.c/     1602347877  1000  1000  100664  411       `
#include "holberton.h"

/**
 * _strstr - locates a substring
 * @haystack: string
 * @needle: substring
 * Return: pointer to beginning of substring
 */

char *_strstr(char *haystack, char *needle)
{
	int x = 0, y = 0;

	while (haystack[x] != 0)
	{
		while (needle[y] != 0)
		{
			if (haystack[x + y] != needle[y])
				break;
			y++;
		}
		if (needle[y] == 0)
			return (haystack + x);
		x++;
	}
	return (0);
}

6-abs.c/        1602347877  1000  1000  100664  273       `
#include "holberton.h"

int _putchar(char c);
/**
 * _abs - Checks absolute value
 * @r: Integer
 * Description: Checks absolute value of an integer
 *
 * Return: c
 */


int _abs(int r)
{
	if (r > 0)
	{
		return (r);
	}
	if (r < 0)
	{
		return (r * -1);
	}
	return (0);
}

9-strcpy.c/     1602347877  1000  1000  100664  331       `
#include "holberton.h"

/**
 * _strcpy - copies string to buffer
 * @dest: destination
 * @src: source
 * Return: destination value
 */

char *_strcpy(char *dest, char *src)
{
	int length = 0, spot;

	while (src[length] != '\0')
	{
		length++;
	}
	for (spot = 0; spot <= length; spot++)
		dest[spot] = src[spot];
	return (dest);
}

_putchar.c/     1602347883  1000  1000  100664  247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

